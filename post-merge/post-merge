#!/bin/bash
#
# TODO JSON (http://www.jsoneditoronline.org/) Konfiguration berücksichtigen, jeweils in ".git/hooks/postmergerc"
# z.B.
#	{
#	  "autogen": "--with-gtk=3.0",
#	  "configure": "",
#	  "make": "",
#	  "checkinstall": "--exclude /usr/local/lib/python2.7/dist-packages/easy-install.pth"
#	}

red="\e[0;31m"
green="\e[0;32m"
yellow="\e[0;33m"
NC="\e[0m" # No Color

autogenParam=""
configureParam=""
checkinstallParam=""

if [ -f ".git/hooks/postmergerc" ]
then
  echo -e "${yellow}.git/hooks/postmergerc${NC} gefunden"

  autogenParam=$(jq '.autogen' .git/hooks/postmergerc | tr -d "\"")
  if [ "$autogenParam" != "" ]; then echo -e "Zusätzliche Parameter autogen"; echo -e "\t$autogenParam"; fi

  configureParam=$(jq '.configure' .git/hooks/postmergerc | tr -d "\"")
  if [ "$configureParam" != "" ]; then echo -e "Zusätzliche Parameter configure"; echo -e "\t$configureParam"; fi

  makeParam=$(jq '.make' .git/hooks/postmergerc | tr -d "\"")
  if [ "$makeParam" != "" ]; then echo -e "Zusätzliche Parameter make"; echo -e "\t$makeParam"; fi

  checkinstallParam=$(jq '.checkinstall' .git/hooks/postmergerc | tr -d "\"")
  if [ "$checkinstallParam" != "" ]; then echo -e "Zusätzliche Parameter checkinstall"; echo -e "\t$checkinstallParam"; fi

fi

# GIT
source=$(git config --get remote.origin.url)
#name=$(echo $source | gawk -F "/" '{print $5}' | sed -e 's/\.git$//')
#name=$(git remote -v | head -n1 | awk '{print $2}' | sed -e 's,.*:\(.*/\)\?,,' -e 's/\.git$//')
name=$(basename $(git config --get remote.$(git config --get branch.master.remote).url) .git)
gitowner=$(echo $source | gawk -F "/" '{ print ( $(NF-1) ) }' | gawk -F ":" '{ print ( $(NF) ) }')
release=$(($(git rev-list HEAD --count) - 1))

responseGitHub=$(curl -s "https://api.github.com/search/repositories?q=+repo:$gitowner/$name")
isGitHub=$(echo "$responseGitHub" | jq '.errors <= 0')

if [ "$isGitHub" == "true" ]
then
  echo -e "${green}Gehostet auf GitHub, API kann verwendet werden.)${NC}"
fi

if [ "$(command -v easy_install)" != "" ]
then
  echo -e "${yellow}Das Programm \"easy_install\" aus dem Paket \"python-setuptools\" ist installiert. Das kann in Verbindung mit dem hier verwendeten \"checkinstall\" zu Problemen führen.${NC}"
fi

exec < /dev/tty

while true; do
  read -n 1 -p "$name installieren? [y/n]: " yn
  echo;
  case $yn in
    [Yy]* )
      
    break;;
    [Nn]* ) exit;;
    * ) echo "Bitte mit yes oder no antworten.";;
  esac
done

if [ -f description-pak ]
then
  echo -e "Lösche ${yellow}description-pak${NC}"
  if [ -w description-pak ]
  then
    rm description-pak
  else
    sudo rm description-pak
  fi
fi



if [ -f autogen.sh ]
then
  echo -e "Starte ${green}autogen.sh${NC}"
  ./autogen.sh $autogenParam
  OUT=$?
  if [ $OUT -ne 0 ];then
    echo -e "${red}Es trat ein Fehler auf. Bitte vorhergehende Ausgaben überprüfen. Breche ab.${NC}"
    exit
  fi
fi

if [ -f configure ]
then
  echo -e "Starte ${green}configure${NC}"
  ./configure $configureParam
  OUT=$?
  if [ $OUT -ne 0 ];then
    echo -e "${red}Es trat ein Fehler auf. Bitte vorhergehende Ausgaben überprüfen. Breche ab.${NC}"
    exit
  fi
fi

if [ -f "Makefile" ]
then
  echo -e "Starte ${green}make${NC}"
  make
  OUT=$?
  if [ $OUT -ne 0 ];then
    echo -e "${red}Es trat ein Fehler auf. Bitte vorhergehende Ausgaben überprüfen. Breche ab.${NC}"
    exit
  fi
fi




version=""
maintainer=""
license=""
requires=""
summary=""
group=""
architecture=""
sourceHtmlUrl=""

if [ "$isGitHub" == "true" ]
then
  sourceHtmlUrl=$(echo "$responseGitHub" | jq '.items[].html_url')
fi

if [ -f "debian/changelog" ]
then
  echo -e "Verwende: ${green}debian/changelog${NC}"
  if [ "$version" == "" ]; then version=$(head -1 "debian/changelog" | gawk -F " " '{print $2}' |  tr -d "()"); fi
fi

if [ -f "debian/control" ]
then
  echo -e "Verwende: ${green}debian/control${NC}"
  if [ "$architecture" == "" ]; then architecture=$(grep '^ *Architecture *' "debian/control" | gawk -F ":" '{print $2}' |  tr -d " "); fi
  if [ "$requires" == "" ]; then requires=$(grep '^ *Depends *' "debian/control" | gawk -F ":" '{print $2}' |  tr -d " "); fi
  if [ "$maintainer" == "" ]; then maintainer=$(grep '^ *Maintainer *' "debian/control" | gawk -F ":" '{print $2}' | sed -e 's/^ *//' -e 's/ *$//'); fi
  if [ "$group" == "" ]; then group=$(grep '^ *Section *' "debian/control" | gawk -F ":" '{print $2}' | sed -e 's/^ *//' -e 's/ *$//'); fi
  if [ "$summary" == "" ]; then summary=$(grep '^ *Description *' "debian/control" | gawk -F ":" '{print $2}' | sed -e 's/^ *//' -e 's/ *$//'); echo "$summary" > description-pak; fi
fi

if [ -f "Makefile" ]
then
  echo -e "Verwende: ${green}Makefile${NC}"
  if [ "$version" == "" ]; then version=$(grep '^ *PACKAGE_VERSION *= *' Makefile | gawk -F "=" '{print $2}' |  tr -d " "); fi
  if [ "$version" != "" ]; then echo -e "\tVersion: ${green}$version${NC}"; fi
fi

if [ -f "$name.spec" ]
then
  echo -e "Verwende: ${green}$name.spec${NC}"
  if [ "$license" == "" ]; then license=$(grep '^ *License *' "$name.spec" | gawk -F ":" '{print $2}' |  tr -d " "); fi
  if [ "$license" != "" ]; then echo -e "\tLicense: ${green}$license${NC}"; fi
  
  if [ "$group" == "" ]; then group=$(grep '^ *Group *' "$name.spec" | gawk -F ":" '{print $2}' |  tr -d " "); fi
  if [ "$group" != "" ]; then echo -e "\tGroup: ${green}$group${NC}"; fi
  
  if [ "$summary" == "" ]; then summary=$(grep '^ *Summary *' "$name.spec" | gawk -F ":" '{print $2}' | sed -e 's/^ *//' -e 's/ *$//'); echo "$summary" > description-pak; fi
  if [ "$summary" != "" ]; then echo -e "\tSummary: ${green}$summary${NC}"; fi
  
  if [ "$requires" == "" ]; then requires=$(grep '^ *Requires *' "$name.spec" | gawk -F ":" '{print $2}' |  tr -d " " | tr '\n' ',' | sed -e 's/^,*//' -e 's/,*$//'); fi
  if [ "$requires" != "" ]; then echo -e "\tRequires: ${green}$requires${NC}"; fi
fi

if [ -f "setup.py" ]
then
  if [ ! -x "setup.py" ]
  then
    echo -e "${red}setup.py ist nicht ausführbar -> Abbruch.${NC}"
    exit
  else
    echo -e "Verwende: ${green}setup.py${NC}"
    if [ "$maintainer" == "" ]; then maintainer=$(./setup.py --author); fi
    if [ "$maintainer" != "" ]; then echo -e "\tMaintainer: ${green}$maintainer${NC}"; fi
    
    if [ "$maintainermail" == "" ]; then maintainermail=$(./setup.py --author-email); fi
    if [ "$maintainermail" != "" ]; then echo -e "\tMaintainer eMail: ${green}$maintainermail${NC}"; fi
    
    if [ "$version" == "" ]; then version=$(./setup.py --version); fi
    if [ "$version" != "" ]; then echo -e "\tVersion: ${green}$version${NC}"; fi
    
    if [ "$license" == "" ]; then license=$(./setup.py --license); fi
    if [ "$license" != "" ]; then echo -e "\tLicense: ${green}$license${NC}"; fi
    
    if [ "$requires" == "" ]; then requires=$(./setup.py --requires); fi
    if [ "$requires" != "" ]; then echo -e "\tRequires: ${green}$requires${NC}"; fi
    
    if [ "$summary" == "" ]; then summary=$(./setup.py --description); echo "$summary" > description-pak; fi
    if [ "$summary" != "" ]; then echo -e "\tSummary: ${green}$summary${NC}"; fi
  fi
fi

if [ "$isGitHub" == "true" ]
then
  echo -e "Verwende: ${green}GitHub-API${NC}"
  if [ "$summary" == "" ]; then summary=$(echo "$responseGitHub" | jq '.items[].description' | sed -e 's/^"*//' -e 's/"*$//'); echo "$summary" > description-pak; fi
  if [ "$summary" != "" ]; then echo -e "\tSummary: ${green}$summary${NC}"; fi
fi

if [ "$sourceHtmlUrl" == "" ]
then
  sourceHtmlUrl="$source"
fi

if [ -f "setup.py" ]
then
  
  # --spec foo -> forget the ugly spec file
  
  exec < /dev/tty
  while true; do
    read -n 1 -p "Installationsmethode für \"$name\" wählen (1 - python setup.py install, 2 - pip install): " yn
    echo;
    case $yn in
      [1]* ) echo -e "Installiere mit ${green}checkinstall ... python setup.py install${NC}"
        sudo checkinstall $checkinstallParam --spec foo --maintainer \""$maintainer ($maintainermail)"\" --pkglicense \""$license"\" --pkgname \""$name"\" --pkgrelease \""$release"\" --pkgversion \""$version"\" --pkgsource \""$sourceHtmlUrl"\" --pkggroup \""$group"\" --requires \""$requires"\" --pkgarch \""$architecture"\" python setup.py install
      break;;
      [2]* ) echo -e "Installiere mit ${green}checkinstall ... pip install${NC}"
        if [ -d "/tmp/pip_build_$USER/" ]
        then
          echo -e "Lösche ${yellow}/tmp/pip_build_$USER/${NC}"
          sudo rm -rf "/tmp/pip_build_$USER/"
        fi
        
        if [ -d "/tmp/pip_build_root/" ]
        then
          echo -e "Lösche ${yellow}/tmp/pip_build_root/${NC}"
          sudo rm -rf "/tmp/pip_build_root/"
        fi
        sudo checkinstall $checkinstallParam --spec foo --maintainer \""$maintainer ($maintainermail)"\" --pkglicense \""$license"\" --pkgname \""$name"\" --pkgrelease \""$release"\" --pkgversion \""$version"\" --pkgsource \""$sourceHtmlUrl"\" --pkggroup \""$group"\" --requires \""$requires"\" --pkgarch \""$architecture"\" pip install
      break;;
      * ) echo "Bitte mit 1 oder 2 antworten.";;
    esac
  done
else
  
  # --spec foo -> forget the ugly spec file
  
  echo -e "Installiere mit ${green}checkinstall ...${NC}"
  sudo checkinstall --spec foo --maintainer \""$maintainer ($maintainermail)"\" --pkglicense \""$license"\" --pkgname \""$name"\" --pkgrelease \""$release"\" --pkgversion \""$version"\" --pkgsource \""$sourceHtmlUrl"\" --pkggroup \""$group"\" --requires \""$requires"\" --pkgarch \""$architecture"\"
fi

exit 0






