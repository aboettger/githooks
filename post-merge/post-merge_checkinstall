#!/bin/bash
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the version 2 of the GNU General Public License
#    as published by the Free Software Foundation
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#    Thanks to Felipe Eduardo Sanchez Diaz Duran <izto@asic-linux.com.mx>,
#    the author of checkinstall for the many ideas
#
#
#
# TODO JSON (http://www.jsoneditoronline.org/) Evaluate configuration in "postmergerc", respectively in the directory ".git/hooks/postmergerc"
# e.g.
#	{
#	  "autogen": "--with-gtk=3.0",
#	  "configure": "",
#	  "make": "",
#	  "checkinstall": "--exclude /usr/local/lib/python2.7/dist-packages/easy-install.pth"
#	}

# Trap the INT signal (ctrl-c, for example)
trap trapint 2

red="\e[0;31m"
green="\e[0;32m"
yellow="\e[0;33m"
TOA="\e[0m" # Turn off character attributes
bold="\e[0;1m"

# Enable alias expansion in command substitution
shopt -s expand_aliases

# Vefify that we have gettext available
gettext "Bye." &> /dev/null
if [ $? -gt 0 ]; then
  alias ck_gettext="echo -e"
else
  alias ck_gettext="gettext -s --"
fi

## echo with newline at the end
function echog() {
  local format="$1"
  shift
  printf -- "$(ck_gettext "$format")\n" "$@" >&2
}

## echo with NO newline at the end
function   echogn() {
  local format="$1"
  shift
  printf -- "$(ck_gettext "$format")" "$@" >&2
}

# Prints OK or FAILED! depending on previous command return value
function okfail () {
  if [ $? -gt 0 ]; then
    logError "There was an error. Aborting."
    return 1
  else
    logInfo "OK"
    return 0
  fi
}

function logInfo () {
  green="\e[0;32m"
  echog "${green}$1${TOA}"
}

function logWarn () {
  yellow="\e[0;33m"
  echog "${yellow}$1${TOA}"
}

function logError () {
  red="\e[0;31m"
  echog "${red}$1${TOA}"
}

function trapint {
  echo
  echo
  echog "$(basename "$0") SIGINT received"
  cleanup
}

function cleanup {
  echogn "Cleaning up..."
  okfail
  echog "Bye."
  echo
  exit 1
}

if [ "$(command -v checkinstall)" == "" ]
then
  logError "Checkinstall not installed. Aborting."
  cleanup
fi

autogenParam=""
configureParam=""
checkinstallParam=""

if [ -f ".git/hooks/postmergerc" ]
then
  logInfo "\".git/hooks/postmergerc\" found"
  
  autogenParam=$(jq '.autogen' .git/hooks/postmergerc | tr -d "\"")
  if [ "$autogenParam" != "" ]; then echog "Additional parameters for ${bold}autogen${TOA}"; echog "\t${green}$autogenParam${TOA}"; fi

  configureParam=$(jq '.configure' .git/hooks/postmergerc | tr -d "\"")
  if [ "$configureParam" != "" ]; then echog "Additional parameters for ${bold}configure${TOA}"; echog "\t${green}$configureParam${TOA}"; fi
  
  makeParam=$(jq '.make' .git/hooks/postmergerc | tr -d "\"")
  if [ "$makeParam" != "" ]; then echog "Additional parameters for ${bold}make${TOA}"; echog "\t${green}$makeParam${TOA}"; fi

  checkinstallParam=$(jq '.checkinstall' .git/hooks/postmergerc | tr -d "\"")
  if [ "$checkinstallParam" != "" ]; then echog "Additional parameters for ${bold}checkinstall${TOA}"; echog "\t${green}$checkinstallParam${TOA}"; fi
  echo
fi

# GIT
source=$(git config --get remote.origin.url)
#name=$(echo $source | gawk -F "/" '{print $5}' | sed -e 's/\.git$//')
#name=$(git remote -v | head -n1 | awk '{print $2}' | sed -e 's,.*:\(.*/\)\?,,' -e 's/\.git$//')
name=$(basename $(git config --get remote.$(git config --get branch.master.remote).url) .git)
gitowner=$(echo $source | gawk -F "/" '{ print ( $(NF-1) ) }' | gawk -F ":" '{ print ( $(NF) ) }')
release=$(($(git rev-list HEAD --count) - 1))

responseGitHub=$(curl -s "https://api.github.com/search/repositories?q=+repo:$gitowner/$name")
isGitHub=$(echo "$responseGitHub" | jq '.errors <= 0')

if [ "$isGitHub" == "true" ]
then
  logInfo "Hosted on GitHub. GitHub-API can be used."
  echo
fi

if [ "$(command -v easy_install)" != "" ]
then
  logWarn "The program \"easy_install\" from the package \"python-setuptools\" is installed. This can make problems with \"checkinstall\"."
fi

exec < /dev/tty

while true; do
  read -n 1 -p "$name install? [y/n]: " yn
  echo;
  case $yn in
    [Yy]* )
      
    break;;
    [Nn]* ) exit;;
    * ) echo "Please respond with [y]es or [n]o.";;
  esac
done

if [ -f description-pak ]
then
  logWarn "Delete description-pak"
  if [ -w description-pak ]
  then
    rm description-pak
  else
    sudo rm description-pak
  fi
fi



if [ -f autogen.sh ]
then
  logInfo "Starting autogen.sh"
  ./autogen.sh $autogenParam
  okfail; [ $? -gt 0 ] && exit 1
fi

if [ -f configure ]
then
  logInfo "Starting configure"
  ./configure $configureParam
  okfail; [ $? -gt 0 ] && exit 1
fi

if [ -f "Makefile" ]
then
  logInfo "Starting make"
  make $makeParam
  okfail; [ $? -gt 0 ] && exit 1
fi




version=""
maintainer=""
license=""
requires=""
summary=""
group=""
architecture=""
sourceHtmlUrl=""

if [ "$isGitHub" == "true" ]
then
  sourceHtmlUrl=$(echo "$responseGitHub" | jq '.items[].html_url')
fi

if [ -f "debian/changelog" ]
then
  echog "Search for information via ${bold}debian/changelog${TOA}"
  if [ "$version" == "" ]; then version=$(head -1 "debian/changelog" | gawk -F " " '{print $2}' |  tr -d "()"); fi
fi

if [ -f "debian/control" ]
then
  echog "Search for information via ${bold}debian/control${TOA}"
  if [ "$architecture" == "" ]; then architecture=$(grep '^ *Architecture *' "debian/control" | gawk -F ":" '{print $2}' |  tr -d " "); fi
  if [ "$requires" == "" ]; then requires=$(grep '^ *Depends *' "debian/control" | gawk -F ":" '{print $2}' |  tr -d " "); fi
  if [ "$maintainer" == "" ]; then maintainer=$(grep '^ *Maintainer *' "debian/control" | gawk -F ":" '{print $2}' | sed -e 's/^ *//' -e 's/ *$//'); fi
  if [ "$group" == "" ]; then group=$(grep '^ *Section *' "debian/control" | gawk -F ":" '{print $2}' | sed -e 's/^ *//' -e 's/ *$//'); fi
  if [ "$summary" == "" ]; then summary=$(grep '^ *Description *' "debian/control" | gawk -F ":" '{print $2}' | sed -e 's/^ *//' -e 's/ *$//'); echo "$summary" > description-pak; fi
fi

if [ -f "Makefile" ]
then
  echog "Search for information via ${bold}Makefile${TOA}"
  if [ "$version" == "" ]; then version=$(grep '^ *PACKAGE_VERSION *= *' Makefile | gawk -F "=" '{print $2}' |  tr -d " "); fi
  if [ "$version" != "" ]; then echog "\tVersion: ${green}$version${TOA}"; fi
fi

if [ -f "$name.spec" ]
then
  echog "Search for information via ${bold}$name.spec${TOA}"
  if [ "$license" == "" ]; then license=$(grep '^ *License *' "$name.spec" | gawk -F ":" '{print $2}' |  tr -d " "); fi
  if [ "$license" != "" ]; then echog "\tLicense: ${green}$license${TOA}"; fi
  
  if [ "$group" == "" ]; then group=$(grep '^ *Group *' "$name.spec" | gawk -F ":" '{print $2}' |  tr -d " "); fi
  if [ "$group" != "" ]; then echog "\tGroup: ${green}$group${TOA}"; fi
  
  if [ "$summary" == "" ]; then summary=$(grep '^ *Summary *' "$name.spec" | gawk -F ":" '{print $2}' | sed -e 's/^ *//' -e 's/ *$//'); echo "$summary" > description-pak; fi
  if [ "$summary" != "" ]; then echog "\tSummary: ${green}$summary${TOA}"; fi
  
  if [ "$requires" == "" ]; then requires=$(grep '^ *Requires *' "$name.spec" | gawk -F ":" '{print $2}' |  tr -d " " | tr '\n' ',' | sed -e 's/^,*//' -e 's/,*$//'); fi
  if [ "$requires" != "" ]; then echog "\tRequires: ${green}$requires${TOA}"; fi
fi

if [ -f "setup.py" ]
then
  if [ ! -x "setup.py" ]
  then
    echog "${red}setup.py is not executable. Aborting.${TOA}"
    exit 1
  else
    echog "Search for information via ${bold}setup.py${TOA}"
    if [ "$maintainer" == "" ]; then maintainer=$(./setup.py --author); fi
    if [ "$maintainer" != "" ]; then echog "\tMaintainer: ${green}$maintainer${TOA}"; fi
    
    if [ "$maintainermail" == "" ]; then maintainermail=$(./setup.py --author-email); fi
    if [ "$maintainermail" != "" ]; then echog "\tMaintainer eMail: ${green}$maintainermail${TOA}"; fi
    
    if [ "$version" == "" ]; then version=$(./setup.py --version); fi
    if [ "$version" != "" ]; then echog "\tVersion: ${green}$version${TOA}"; fi
    
    if [ "$license" == "" ]; then license=$(./setup.py --license); fi
    if [ "$license" != "" ]; then echog "\tLicense: ${green}$license${TOA}"; fi
    
    if [ "$requires" == "" ]; then requires=$(./setup.py --requires); fi
    if [ "$requires" != "" ]; then echog "\tRequires: ${green}$requires${TOA}"; fi
    
    if [ "$summary" == "" ]; then summary=$(./setup.py --description); echo "$summary" > description-pak; fi
    if [ "$summary" != "" ]; then echog "\tSummary: ${green}$summary${TOA}"; fi
  fi
fi

if [ "$isGitHub" == "true" ]
then
  echog "Search for information via ${bold}GitHub-API${TOA}"
  if [ "$summary" == "" ]; then summary=$(echo "$responseGitHub" | jq '.items[].description' | sed -e 's/^"*//' -e 's/"*$//'); echo "$summary" > description-pak; fi
  if [ "$summary" != "" ]; then echog "\tSummary: ${green}$summary${TOA}"; fi
fi

if [ "$sourceHtmlUrl" == "" ]
then
  sourceHtmlUrl="$source"
fi

if [ -f "setup.py" ]
then
  echo
  echog "Install with ${green}checkinstall ... python setup.py install${TOA}"
  # --spec foo -> forget the ugly spec file
  sudo checkinstall --spec foo --maintainer \""$maintainer ($maintainermail)"\" --pkglicense \""$license"\" --pkgname \""$name"\" --pkgrelease \""$release"\" --pkgversion \""$version"\" --pkgsource \""$sourceHtmlUrl"\" --pkggroup \""$group"\" --requires \""$requires"\" --pkgarch \""$architecture"\" $checkinstallParam python setup.py install
else
  echo
  echog "Install with ${green}checkinstall ...${TOA}"
  # --spec foo -> forget the ugly spec file
  sudo checkinstall --spec foo --maintainer \""$maintainer ($maintainermail)"\" --pkglicense \""$license"\" --pkgname \""$name"\" --pkgrelease \""$release"\" --pkgversion \""$version"\" --pkgsource \""$sourceHtmlUrl"\" --pkggroup \""$group"\" --requires \""$requires"\" --pkgarch \""$architecture"\"
fi

exit 0

